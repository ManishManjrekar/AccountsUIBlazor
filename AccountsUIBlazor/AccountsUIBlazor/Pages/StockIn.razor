@page "/AddStockIn"

@using AccountsUIBlazor.UIModels; 
@using System.Net.Http

@using System.Text;
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@using AccountsUIBlazor.Data;
@using System.Text.Json


<h3>Stock In Entry</h3>


<EditForm Model="UIStockIn" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
    <div class="row">
        <div class="col-md-4">
            <label for="selectvendor">Please Select Vendor</label>
            <RadzenAutoComplete Placeholder="Select vendor..." class="form-control" Data="@UIStockIn.VendorNames" TextProperty="VendorName" ValueProperty="@UIStockIn.VendorId" Change="@OnChange" />
        </div>


        <div class="col-md-4">
            <label for="fromDate"> Entry Date</label>
            <RadzenDatePicker Name="fromDate" class="form-control-plaintext" @bind-Value="@UIStockIn.CreatedDate" DateFormat="dd/MM/yyyy" Change="DateSelection" />
        </div>
    </div>
   
    <div class="row" style="margin-top:10px">
        <div class="col-md-4">
            <label for="lastName">Load Name</label>
            <RadzenTextBox type="text" class="form-control" onkeydown="userNameChanged" id="LoadName" onchange="userNameChanged" @bind-value="@UIStockIn.LoadName" />
            @*  <ValidationMessage For="@(()=>CustomerModel.LastName)" /> *@
        </div>
        <div class="col-md-4">
            <label for="lastName">Quantity</label>
            <input type="text" class="form-control" id="Quantity" @bind-value="@UIStockIn.Quantity" placeholder="enter last name..." />
            @*  <ValidationMessage For="@(()=>CustomerModel.LastName)" /> *@
        </div>
        
    </div>
<div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add Stock</button>
</div>
</EditForm>

<div class="row mt-2">
    <h4>StockIn Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="salesDetailsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@StockInList" TItem="UIStockIn" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="UIStockIn" Property="LoadName" Title="Customer Name" Width="120px" />

                <RadzenDataGridColumn TItem="UIStockIn" Property="VendorName" Title="Vendor Name" Width="120px" />
                <RadzenDataGridColumn TItem="UIStockIn" Property="CreatedDate" Title="CreatedDate" Width="120px" />
                <RadzenDataGridColumn TItem="UIStockIn" Property="Quantity" Title="Quantity" Width="120px" />
                <RadzenDataGridColumn TItem="UIStockIn" Context="StockInList" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                    <Template Context="StockInList">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(StockInList))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@code
{


    private async Task OpenDuplicateLoadNameDialog()
    {
        var confirmationResult = await DialogService.Alert("Duplicate Load Name exist, please change the load name", "Duplicate Load Name");
        //var confirmationResult = await DialogService.Confirm("confirm you want mark this stock as payment completed", "Stock Payment completed", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirmationResult.Equals(true))
        {
            // if yes then
            Console.WriteLine();
        }
    }
}
@code {

    [Inject]
    protected DialogService DialogService { get; set; }
    public UICalenderModel UICalenderModel { get; set; } = new();
    public UIStockIn UIStockIn { get; set; } = new() {  };
    public List<UIStockIn> StockInList = new List<UIStockIn>();//for grid

    //Grid variables
    RadzenDataGrid<UIStockIn> salesDetailsGrid;
    UIStockIn salesDetailsGridInsert;
    UIStockIn salesDetailsGridUpdate;

    public string Log { get; set; } = "";

    protected override void OnInitialized()
    {
        // Load customer details on page load
        LoadStockInDetails();
        FillGridForStockIns();
    }

    private async void LoadStockInDetails()
    {
        //for binding autocomplete dropdownlist 
        UIStockIn.VendorNames = new List<VendorNames>();
        UIStockIn.VendorNames = await HttpClient.GetFromJsonAsync<List<VendorNames>>($"Vendor/GetAllVendorNames");
        StateHasChanged();
    }
    private async void FillGridForStockIns()
    {
        //for binding grid
        StockInList = await HttpClient.GetFromJsonAsync<List<UIStockIn>>($"StockIn/GetAllStockIns");
        StateHasChanged();
    }


    private async void HandleDeleteClick(MouseEventArgs args)
    {

    }


    private void userNameChanged(string value)
    {
        UIStockIn.LoadName = value;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // var results = await HttpClient.GetStringAsync($"StockIn/GetVendorNames");
        var vendorname = await HttpClient.GetFromJsonAsync<List<VendorNames>>($"StockIn/GetVendorNames");
        //var APIreturn =  JsonConvert.DeserializeObject(results);
        UIStockIn.VendorNames = vendorname;
        //Console.WriteLine(Vendorname);
    }
    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UIStockIn.VendorId =  UIStockIn.VendorNames.Where(e => e.VendorName.Equals(value))
                              .Select(p=> p.VendorId).FirstOrDefault();
        UIStockIn.VendorName = str.ToString();

        Console.WriteLine($"Value changed to {str}");
    }
    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }

    public void DropDownChanged()
    {
        Log += "DropDownChanged fired. ";
    }
    public void DateSelection()
    {
        Log += "DateSelection fired. ";

        var laodcount = GetLoadValue();
        Console.WriteLine(laodcount);
    }
    public async Task GetLoadValue()
    {
        // Log += "DateSelection fired. ";
        DateTime dateAndTime = UIStockIn.CreatedDate;
        var datevalue = dateAndTime.ToString("dd/MM/yyyy");
        var createdDate = UIStockIn.CreatedDate;
        var vendorid = UIStockIn.VendorId;
        var laodcount = await HttpClient.GetStringAsync($"StockIn/GetVendorLoadCount?vendorid={vendorid}&createdDate={createdDate.ToString("yyyy-MM-dd")}");
        Console.WriteLine(laodcount);
        string value = $"{UIStockIn.VendorName}_{datevalue}_LoadName_{laodcount}";
        userNameChanged(value);
        //UIStockIn.LoadName = $" {UIStockIn.VendorName}_{datevalue}_LoadName_{laodcount}";
        StateHasChanged();

        Log += UIStockIn.LoadName;
    }
    public void Submit(EditContext formContext)
    {
        var form = (UICustomer)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UIStockIn = (UIStockIn)formContext.Model;

        try
        {
            //First check duplicate name exists for this load name or not?
            var createdDate = UIStockIn.CreatedDate;
            var vendorid = UIStockIn.VendorId;
            var loadName = UIStockIn.LoadName;
            var loadNameExists = await HttpClient.GetStringAsync($"StockIn/GetDuplicateOrNot?vendorid={vendorid}&createdDate={createdDate.ToString("yyyy-MM-dd")}&loadName={loadName}");
            Console.WriteLine(loadNameExists);

            if (loadNameExists != "true")
            {
                var obj = await HttpClient.PostAsJsonAsync($"StockIn/AddStockIn", UIStockIn);
                FillGridForStockIns();
                UIStockIn = new();
            }
            else
            {
                OpenDuplicateLoadNameDialog();
            }

            
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }

    void Reset()
    {
        salesDetailsGridInsert = null;
        salesDetailsGridUpdate = null;
    }
    async Task DeleteRow(UIStockIn salesDetails)
    {
        Reset();

        if (StockInList.Contains(salesDetails))
        {
            try
            {
                var obj = await HttpClient.DeleteAsync($"StockIn?id={salesDetails.StockInId}");
                FillGridForStockIns();
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message.ToString());
            }
            await salesDetailsGrid.Reload();
        }
    }
}
 