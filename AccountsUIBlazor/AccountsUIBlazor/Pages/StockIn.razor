@page "/AddStockIn"

@using AccountsUIBlazor.UIModels; 
@using System.Net.Http

@using System.Text;
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@using AccountsUIBlazor.Data;
@using System.Text.Json


<h3>Stock In Entry</h3>


<EditForm Model="UIStockIn" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
    <div class="row">
        <div class="col-md-4">
            <label for="selectvendor">Please Select Vendor</label>
            <RadzenAutoComplete Placeholder="Select vendor..." class="form-control" Data="@UIStockIn.VendorNames" TextProperty="VendorName" ValueProperty="@UIStockIn.VendorId" Change="@OnChange" />
        </div>


        <div class="col-md-4">
            <label for="fromDate"> Entry Date</label>
            <RadzenDatePicker Name="fromDate" class="form-control-plaintext" @bind-Value="@UIStockIn.CreatedDate" DateFormat="dd/MM/yyyy" Change="DateSelection" />
        </div>
    </div>
   
    <div class="row" style="margin-top:10px">
        <div class="col-md-4">
            <label for="lastName">Load Name</label>
            <RadzenTextBox type="text" class="form-control" onkeydown="userNameChanged" id="LoadName" onchange="userNameChanged" @bind-value="@UIStockIn.LoadName" />
            @*  <ValidationMessage For="@(()=>CustomerModel.LastName)" /> *@
        </div>
        <div class="col-md-4">
            <label for="lastName">Quantity</label>
            <input type="text" class="form-control" id="Quantity" @bind-value="@UIStockIn.Quantity" placeholder="enter last name..." />
            @*  <ValidationMessage For="@(()=>CustomerModel.LastName)" /> *@
        </div>
        
    </div>
<div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add Stock</button>
</div>
</EditForm>


<div class="row mt-3">
    <div class="col-md-12">

        <h4>Stock In Details</h4>

        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Load Name</th>
                    <th>Vendor Name</th>
                    <th>Date</th>
                    <th>Quantity</th>
                    <th>Payment Done</th>
                    <th></th>
                    <!-- Add more columns as needed -->
                </tr>
            </thead>
            <tbody>
                @foreach (var sale in StockInList)
                {
                    <tr>
                        <td>@sale.LoadName</td>
                        <td>@sale.VendorName</td>
                        <td>@sale.CreatedDate</td>
                        <td>@sale.Quantity</td>
                        <td>No</td>
                        <td>
                            <div>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                              Click="HandleDeleteClick"><RadzenIcon Icon="delete" /></RadzenButton>
                            </div>
                        </td>
                        <!-- Add more columns as needed -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {

    public UICalenderModel UICalenderModel { get; set; } = new();
    public UIStockIn UIStockIn { get; set; } = new() {  };
    public List<UIStockIn> StockInList = new List<UIStockIn>();//for grid



    public string Log { get; set; } = "";

    protected override void OnInitialized()
    {
        // Load customer details on page load
        LoadStockInDetails();
        FillGridForStockIns();
    }

    private async void LoadStockInDetails()
    {
        //for binding autocomplete dropdownlist 
        UIStockIn.VendorNames = new List<VendorNames>();
        UIStockIn.VendorNames = await HttpClient.GetFromJsonAsync<List<VendorNames>>($"Vendor/GetAllVendorNames");
        StateHasChanged();
    }
    private async void FillGridForStockIns()
    {
        //for binding grid
        StockInList = await HttpClient.GetFromJsonAsync<List<UIStockIn>>($"StockIn/GetAllStockIns");
        StateHasChanged();
    }


    private async void HandleDeleteClick(MouseEventArgs args)
    {

    }


    private void userNameChanged(string value)
    {
        UIStockIn.LoadName = value;
    }
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        // var results = await HttpClient.GetStringAsync($"StockIn/GetVendorNames");
        var vendorname = await HttpClient.GetFromJsonAsync<List<VendorNames>>($"StockIn/GetVendorNames");
        //var APIreturn =  JsonConvert.DeserializeObject(results);
        UIStockIn.VendorNames = vendorname;
        //Console.WriteLine(Vendorname);
    }
    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UIStockIn.VendorId =  UIStockIn.VendorNames.Where(e => e.VendorName.Equals(value))
                              .Select(p=> p.VendorId).FirstOrDefault();
        UIStockIn.VendorName = str.ToString();

        Console.WriteLine($"Value changed to {str}");
    }
    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }

    public void DropDownChanged()
    {
        Log += "DropDownChanged fired. ";
    }
    public void DateSelection()
    {
        Log += "DateSelection fired. ";

        var laodcount = GetLoadValue();
        Console.WriteLine(laodcount);
    }
    public async Task GetLoadValue()
    {
        // Log += "DateSelection fired. ";
        DateTime dateAndTime = UIStockIn.CreatedDate;
        var datevalue = dateAndTime.ToString("dd/MM/yyyy");
        var createdDate = UIStockIn.CreatedDate;
        var vendorid = UIStockIn.VendorId;
        var laodcount = await HttpClient.GetStringAsync($"StockIn/GetVendorLoadCount?vendorid={vendorid}&createdDate={createdDate}");
        Console.WriteLine(laodcount);
        string value = $"{UIStockIn.VendorName}_{datevalue}_LoadName_{laodcount}";
        userNameChanged(value);
        //UIStockIn.LoadName = $" {UIStockIn.VendorName}_{datevalue}_LoadName_{laodcount}";
        StateHasChanged();

        Log += UIStockIn.LoadName;
    }
    public void Submit(EditContext formContext)
    {
        var form = (UICustomer)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UIStockIn = (UIStockIn)formContext.Model;

        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"StockIn/AddVendor", UIStockIn);
            FillGridForStockIns();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }
}
 