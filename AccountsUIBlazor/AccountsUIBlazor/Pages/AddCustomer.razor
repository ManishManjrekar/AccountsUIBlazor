@page "/AddCustomer"

@using System.Net.Http
@using AccountsUIBlazor.UIModels;
@using System.Text;
@using System.Text.Json;
@inject HttpClient HttpClient;
@inject NavigationManager navigationManager;

<EditForm Model="CustomerModel" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">

    <DataAnnotationsValidator />
    <ValidationSummary />
    @* <div>
            <label id="firstname">First name:</label> 
        <InputText @bind-Value="FormModel.FirstName" type="text" id="FirstName" />
        <label id="lastname">last name:</label>
        <InputText @bind-Value="FormModel.LastName" type="text" id="LastName" />
    </div>
    <button class="btn btn-primary">Submit</button> *@

     
    <div class="row">
            <div class="col-md-8"> 
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="firstName">First Name #</label>
                        <input type="text" class="form-control" id="firstName" @bind-value="@CustomerModel.FirstName" placeholder="enter first name..." />
                        @* <ValidationMessage For="@(()=>CustomerModel.FirstName)" /> *@
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="lastName">Last Name #</label>
                        <input type="text" class="form-control" id="lastName" @bind-value="@CustomerModel.LastName" placeholder="enter last name..." />
                       @*  <ValidationMessage For="@(()=>CustomerModel.LastName)" /> *@
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="MiddleName">Middle Name #</label>
                        <input type="text" class="form-control" id="MiddleName" @bind-value="@CustomerModel.MiddleName" placeholder="enter Middle name..." />
                        @* <ValidationMessage For="@(()=>CustomerModel.MiddleName)" /> *@
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="email">Email Id #</label>
                        <input type="text" class="form-control" id="email" @bind-value="@CustomerModel.Email" placeholder="email..." />
                        @* <ValidationMessage For="@(()=>CustomerModel.Email)" /> *@
                    </div>
                </div>
                 <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="ElectronicPaymentId">Electronic Payment Id #</label>
                    <input type="text" class="form-control" id="ElectronicPaymentId" placeholder="Electronic Payment Id..." @bind-value="@CustomerModel.ElectronicPaymentId" />
                        @* <ValidationMessage For="@(()=>CustomerModel.ElectronicPaymentId)" /> *@
                    </div>
                </div>
                 <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="Mobile">Mobile #</label>
                    <input type="text" class="form-control" placeholder="Mobile number..." id="Mobile" @bind-value="@CustomerModel.Mobile" />
                       
                    </div>
                </div>
                <div class="row" style="margin-top:10px">
                    <div class="col-md-12">
                        <label for="ReferredBy">ReferredBy #</label>
                    <input type="text" class="form-control" placeholder="Referred By..." id="ReferredBy" @bind-value="@CustomerModel.ReferredBy" />
                        <ValidationMessage For="@(()=>CustomerModel.ReferredBy)" />
                    </div>
                </div>
                
                <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add Customer</button>
            </div>
            
        </div>
</EditForm>

<div class="row mt-3">
    <div class="col-md-12">

        <h4>Customer Details</h4>

        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Mobile</th>
                    <th></th>
                    <!-- Add more columns as needed -->
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in customers)
                {
                    <tr>
                        <td>@customer.FirstName</td>
                        <td>@customer.LastName</td>
                        <td>@customer.Email</td>
                        <td>@customer.Mobile</td>
                        <td> <div><RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                              Click="HandleDeleteClick"><RadzenIcon Icon="delete" /></RadzenButton>
                            </div>
                        </td>
                        <!-- Add more columns as needed -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {
    public UICustomer CustomerModel { get; set; } = new();
    public string Log { get; set; } = "";
    private UICustomer UICustomer;
    private List<UICustomer> customers;
    protected override void OnInitialized()
    {
        // Load customer details on page load
        LoadCustomerDetails();
    }

    private void LoadCustomerDetails()
    {
        // HttpResponseMessage response = await HttpClient.GetAsync($"Customer");
        // if (response.IsSuccessStatusCode)
        // {
        //     string responseContent = await response.Content.ReadAsStringAsync();

        //     if (!string.IsNullOrEmpty(responseContent))
        //     {
        //         customers = JsonSerializer.Deserialize<List<UICustomer>>(responseContent);
        //     }
        // }

        customers = new List<UICustomer>() { new UICustomer()
        {
        FirstName = "Raam",
        LastName = "Sree",
        Email = "Chckc@fd.com",
        Mobile = "1234567890",

        },new UICustomer()
        {
        FirstName = "Raam",
        LastName = "Sree",
        Email = "Chckc@fd.com",
        Mobile = "1234567890",

        },new UICustomer()
        {
        FirstName = "Raam",
        LastName = "Sree",
        Email = "Chckc@fd.com",
        Mobile = "1234567890",

        } };
    }
    
    
     bool displayValidationErrorMessages = false;
    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }

    // public void ValidSubmit(EditContext formContext)
    // {
    //     Log += "OnValidSubmit fired. ";
    // }

    public void Submit(EditContext formContext)
    {
        var form = (UICustomer)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    private async void HandleDeleteClick(MouseEventArgs args)
    {
       
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UICustomer = (UICustomer)formContext.Model;

        try
        {
            // var serialized = JsonConvert.SerializeObject(UICustomer);
            // var stringContent = new StringContent(serialized, Encoding.UTF8, "application/json");
            //  // var dataa = HttpClient.GetAsync($"Api/Customer/GetAll").Result;

            var obj = await HttpClient.PostAsJsonAsync($"Customer", UICustomer);
            Console.WriteLine(obj);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }
    

}