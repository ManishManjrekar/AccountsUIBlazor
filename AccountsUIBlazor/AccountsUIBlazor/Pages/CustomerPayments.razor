@page "/CustomerPayments"

@using Accounts.Models.UIModels;
@using System.Net.Http;
@using Newtonsoft.Json;
@using System.Text;
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@using AccountsUIBlazor.Data;
<h3>Customer Payments</h3>


<EditForm Model="UICustomerPayment" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
    <div class="row">
        <div class="col-md-3">
            <label for="selectvendor">Search Customer</label>
            <RadzenAutoComplete Placeholder="Select Customer..." Data="@UICustomerPayment.CustomerList" class="form-control" Name="selectvendor" TextProperty="CustomerName" ValueProperty="@UICustomerPayment.CustomerId" Change="@OnChange" />
        </div>
        <div class="col-md-3">
            <label for="fromDate">Payment Date</label>
            <RadzenDatePicker style="width: 100%;" Name="fromDate" @bind-Value="@UICustomerPayment.PaymentDate" Change="DateSelection" />
        </div>
    </div>
    
    <div class="row mt-1">
    <div class=" col-md-3" >
        <label for="lastName">Amount paid </label>
        <input type="text" class="form-control" id="lastName"  @bind-value="@UICustomerPayment.AmountPaid" placeholder="enter last name..." />
       
    </div>
    <div class="  col-md-3" >
        <label for="lastName">comments</label>
        <input type="text" class="form-control" id="comments"  @bind-value="@UICustomerPayment.Comments" placeholder="enter last name..." />
      
    </div>
    </div>
    <div class="row col-md-3 mt-1" >
        <label for="TypeOfTransaction">Type Of Transaction</label>
        <InputSelect class="form-control" DisplayName="TypeOfTransaction" style="margin-left:10px" @bind-Value="@UICustomerPayment.TypeOfTransaction">
            @foreach (var value in Enum.GetValues<TypeOfTransaction>())
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
    </div>
    
<div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Submit Customer Payment</button>
</div>
</EditForm>

<div class="row mt-2">
    <h4>Customer Purchases Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="customerPaymentSalesDetailsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@customerPaymentMasterDto.CustomerPurchases" TItem="SalesDetailsDto"  Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="CustomerName" Title="Customer Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="VendorName" Title="Vendor Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="LoadName" Title="LoadName Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="Quantity" Title="Quantity" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="Price" Title="Price" Width="120px" />
             
                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="TotalAmount" Title="TotalAmount" Width="120px" />
                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="CreatedDate" Title="CreatedDate" Width="120px" />

               
                <RadzenDataGridColumn TItem="SalesDetailsDto" Context="customerPurchases" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                    <Template Context="customerPurchases">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(customerPurchases))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

<div class="row mt-2">
    <h4>Customer Payment Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="customerPaymentDetailsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@customerPaymentMasterDto.CustomerPaymentsDone" TItem="UICustomerPayment" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="UICustomerPayment" Property="CustomerName" Title="Customer Name" Width="120px" />

                <RadzenDataGridColumn TItem="UICustomerPayment" Property="AmountPaid" Title="Amount Paid" Width="120px" />

                <RadzenDataGridColumn TItem="UICustomerPayment" Property="PaymentDate" Title="LoadName Name" Width="120px" />

                <RadzenDataGridColumn TItem="UICustomerPayment" Property="TypeOfTransaction" Title="TypeOfTransaction" Width="120px" />

                <RadzenDataGridColumn TItem="UICustomerPayment" Property="Comments" Title="Price" Width="120px" />

                

                <RadzenDataGridColumn TItem="UICustomerPayment" Context="CustomerPaymentsDone" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                    <Template Context="CustomerPaymentsDone">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRowCustomerPayment(CustomerPaymentsDone))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>
<div>
    <p> Total  Balance Amount Due:- @customerPaymentMasterDto.BalanceAmountDue</p>
</div>
@code {
    RadzenDataGrid<SalesDetailsDto> customerPaymentSalesDetailsGrid;
    RadzenDataGrid<UICustomerPayment> customerPaymentDetailsGrid;

    public UICustomerPayment UICustomerPayment { get; set; } = new();
    public string Log { get; set; } = "";
    public UICustomerPaymentMaster customerPaymentMasterDto = new UICustomerPaymentMaster();
    SalesDetailsDto customerPurchasesInsert;
    SalesDetailsDto customerPurchasesUpdate;
    int selectedCustId = 0;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var custList = await HttpClient.GetFromJsonAsync<List<UICustomerNames>>($"Customer/GetAllCustomerNames");
        UICustomerPayment.CustomerList = custList;

    }
    private async void LoadCustomerPayment(int customerId)
    {
        customerPaymentMasterDto = await HttpClient.GetFromJsonAsync<UICustomerPaymentMaster>($"CustomerPayment/GetPendingBalanceForCustomer?customerId={customerId}");
        //Console.WriteLine(customers);
        StateHasChanged();
    }

    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UICustomerPayment.CustomerId = UICustomerPayment.CustomerList.Where(e => e.CustomerName.Equals(value))
                              .Select(p=> p.CustomerId).FirstOrDefault();
        UICustomerPayment.CustomerName = str.ToString();
        selectedCustId = UICustomerPayment.CustomerId;
        LoadCustomerPayment(UICustomerPayment.CustomerId);

    }
    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }

    public void DropDownChanged()
    {
        Log += "DropDownChanged fired. ";
    }
    public void DateSelection()
    {
        Log += "DateSelection fired. ";

        //Console.WriteLine(laodcount);
    }
    
    public void Submit(EditContext formContext)
    {
        var form = (UICustomerPayment)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UICustomerPayment = (UICustomerPayment)formContext.Model;

        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"CustomerPayment/AddCustomerPayment", UICustomerPayment);
            LoadCustomerPayment(UICustomerPayment.CustomerId);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }


    void Reset()
    {
        customerPurchasesInsert = null;
        customerPurchasesUpdate = null;
    }


    async Task DeleteRow(SalesDetailsDto customerPurchases)
    {
        Reset();

        if (customerPaymentMasterDto.CustomerPurchases.Contains(customerPurchases))
        {
            try
            {
                var obj = await HttpClient.DeleteAsync($"CustomerPayment?id={customerPurchases.SalesId}");
                LoadCustomerPayment(selectedCustId);
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message.ToString());
            }
            await customerPaymentSalesDetailsGrid.Reload();
        }
    }

    async Task DeleteRowCustomerPayment(UICustomerPayment customerPurchases)
    {
        Reset();

        if (customerPaymentMasterDto.CustomerPaymentsDone.Contains(customerPurchases))
        {
            try
            {
                var obj = await HttpClient.DeleteAsync($"CustomerPayment?id={customerPurchases.CustomerId}");
                LoadCustomerPayment(selectedCustId);
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message.ToString());
            }
            await customerPaymentDetailsGrid.Reload();
        }
    }
}
 