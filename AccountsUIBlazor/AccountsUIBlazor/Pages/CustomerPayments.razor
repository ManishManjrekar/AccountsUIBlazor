@page "/CustomerPayments"

@using AccountsUIBlazor.UIModels; 
@using System.Net.Http
@using AccountsUIBlazor.UIModels;
@using Newtonsoft.Json;
@using System.Text;
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@using AccountsUIBlazor.Data;
<h3>CustomerPayments</h3>


<EditForm Model="UICustomerPayment" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">

    <div class="col-md-8">
        <label for="selectvendor">select Customer #</label>
        <RadzenAutoComplete Placeholder="Select Customer..." Data="@UICustomerPayment.CustomerList" TextProperty="CustomerName" ValueProperty="@UICustomerPayment.CustomerId" Change="@OnChange" />
    </div>

    <div class="col-md-8">
        Payment Date<RadzenDatePicker style="width: 100%;" Name="fromDate" @bind-Value="@UICustomerPayment.PaymentDate" Change="DateSelection" />
    </div>
    <div class="col-md-12">
        <label for="lastName">Amount paid #</label>
        <input type="text" class="form-control" id="lastName" @bind-value="@UICustomerPayment.AmountPaid" placeholder="enter last name..." />
       
    </div>
    <div class="col-md-12">
        <label for="lastName">comments</label>
        <input type="text" class="form-control" id="comments" @bind-value="@UICustomerPayment.Comments" placeholder="enter last name..." />
      
    </div>
    <div>
        <InputSelect @bind-Value="@UICustomerPayment.TypeOfTransaction">
            @foreach (var value in Enum.GetValues<TypeOfTransaction>())
            {
                <option value="@value">@value</option>
            }
        </InputSelect>
    </div>
    
<div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Submit Customer Payment</button>
</div>
</EditForm>
@code {

    public UICustomerPayment UICustomerPayment { get; set; } = new();
    public string Log { get; set; } = "";
    
    
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var custList = await HttpClient.GetFromJsonAsync<List<UICustomerNames>>($"Customer/GetAllCustomerNames");
        UICustomerPayment.CustomerList = custList;
      
    }


    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UICustomerPayment.CustomerId = UICustomerPayment.CustomerList.Where(e => e.CustomerName.Equals(value))
                              .Select(p=> p.CustomerId).FirstOrDefault();
        UICustomerPayment.CustomerName = str.ToString();
        
    }
    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }

    public void DropDownChanged()
    {
        Log += "DropDownChanged fired. ";
    }
    public void DateSelection()
    {
        Log += "DateSelection fired. ";

        //Console.WriteLine(laodcount);
    }
    
    public void Submit(EditContext formContext)
    {
        var form = (UICustomerPayment)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UICustomerPayment = (UICustomerPayment)formContext.Model;

        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"CustomerPayment/AddCustomerPayment", UICustomerPayment);
            Console.WriteLine(obj);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }
}
 