@page "/CommissionExpenses"
@using AccountsUIBlazor.UIModels;
@using System.Net.Http

@using System.Text;
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
@using AccountsUIBlazor.Data;
@using System.Text.Json
@using static AccountsUIBlazor.UIModels.UICommissionAgentExpenses

<h3>CommissionAgentExpenses</h3>

<EditForm Model="UICommissionAgentExpenses" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">

    <div class="row">
        <div class="col-md-4 pt-1">
            <label for="fromDate">Select Expense Type</label>
            <InputSelect class="form-control pt-1" @bind-Value="@UICommissionAgentExpenses.CommissionAgentExpensesTypes" placeholder="Select Expense Type">
                @foreach (var value in Enum.GetValues<CommissionAgentExpensesTypes>())
                {
                    <option value="@value">@value</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-4">
            <label for="Quantity">Amount</label>
            <input type="text" class="form-control" id="Amount" @bind-value="@UICommissionAgentExpenses.AmountPaid" placeholder="Enter Amount..." />
        </div>
    </div>

    <div class="col-md-4 pt-1 ">
        <label for="fromDate"> Select Date</label>
        <RadzenDatePicker Name="fromDate" class="form-control-plaintext" @bind-Value="@UICommissionAgentExpenses.CreatedDate" DateFormat="dd/MM/yyyy" Change="DateSelection" />
    </div>

    <div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Submit</button>
    </div>

</EditForm>

<div class="row mt-2">
    <h4>Commission Agent Expenses Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="CommissionExpensesDetailsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
        Data="@CommissionAgentExpensesList" TItem="UICommissionAgentExpenses"  Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>

                <RadzenDataGridColumn TItem="UICommissionAgentExpenses" Property="CommissionAgentExpensesTypes" Title="Type Of Expenses" Width="120px" />
                  

                <RadzenDataGridColumn TItem="UICommissionAgentExpenses" Property="AmountPaid" Title="Amount Paid" Width="120px" />
               

                <RadzenDataGridColumn TItem="UICommissionAgentExpenses" Property="CreatedDate" Title="CreatedDate" Width="120px" />

                    
               @*   <RadzenDataGridColumn TItem="UICommissionAgentExpenses" Property="ModifiedDate" Title="ModifiedDate" Width="120px" /> *@


                <RadzenDataGridColumn TItem="UICommissionAgentExpenses" Context="CommissionAgentExpensesList" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                    <Template Context="CommissionAgentExpensesList">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(CommissionAgentExpensesList))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>


            </Columns>
        </RadzenDataGrid>
    </div>
</div>


@code
{
    public UICommissionAgentExpenses CommissionAgentExpensesModel { get; set; } = new();
    public UICommissionAgentExpenses UICommissionAgentExpenses { get; set; } = new() { };
    public List<UICommissionAgentExpenses> CommissionAgentExpensesList = new List<UICommissionAgentExpenses>();//for grid
    RadzenDataGrid<UICommissionAgentExpenses> CommissionExpensesDetailsGrid;

    UICommissionAgentExpenses CommissionExpensesDetailsGridInsert;
    UICommissionAgentExpenses CommissionExpensesDetailsGridUpdate;

    public string Log { get; set; } = "";

    public void DropDownChanged()
    {
        Log += "DropDownChanged fired. ";
    }
    public void DateSelection()
    {
        Log += "DateSelection fired. ";
    }



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var custList = await HttpClient.GetFromJsonAsync<List<UICommissionAgentExpenses>>($"CommissionAgentExpenses/GetCommissionAgentExpenses");
        FillCommissionExpensesGrid_AsPerStockInId();
    }

    private async void FillCommissionExpensesGrid_AsPerStockInId()
    {
        CommissionAgentExpensesList = await HttpClient.GetFromJsonAsync<List<UICommissionAgentExpenses>>($"CommissionAgentExpenses/GetAllAsync");
        StateHasChanged();

    }

    void Reset()
    {
        CommissionExpensesDetailsGridInsert = null;
        CommissionExpensesDetailsGridUpdate = null;
    }

    async Task DeleteRow(UICommissionAgentExpenses CommissionModel)
    {
        Reset();

        if (CommissionAgentExpensesList.Contains(CommissionModel))
        {
            try
            {
                var obj = await HttpClient.DeleteAsync($"CommissionAgentExpenses?id={CommissionModel.CommissionAgentExpensesId}");
                //FillCommissionExpensesGrid_AsPerStockInId(UICommissionAgentExpenses.CommissionAgentExpensesId);
                FillCommissionExpensesGrid_AsPerStockInId();
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message.ToString());
            }
            await CommissionExpensesDetailsGrid.Reload();
        }
    }

    public void InvalidSubmit(EditContext formContext)
    {
        var form = (UICommissionAgentExpenses)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UICommissionAgentExpenses = (UICommissionAgentExpenses)formContext.Model;
        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"CommissionAgentExpenses/AddCommissionAgentExpenses", UICommissionAgentExpenses);

            //FillCommissionExpensesGrid_AsPerStockInId(UICommissionAgentExpenses.StockInId);
            FillCommissionExpensesGrid_AsPerStockInId();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }

    }


}
