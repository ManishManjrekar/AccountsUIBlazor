@page "/AddSales"

@using AccountsUIBlazor.UIModels;
@using System.Net.Http
@using AccountsUIBlazor.UIModels;
@using System.Text;
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;

@* @inject DialogService DialogService *@
<h3>Sales</h3>
<style>
    #LoadNam3 > .row>* {
        padding-left: 0;
    }
</style>

<EditForm Model="UISales" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
    @* <div class="col-md-8">
    From Date<RadzenDatePicker style="width: 100%;" Name="fromDate" @bind-Value="UISales.UICalenderModel.FromDate" />
    </div>
    <div class="col-md-8">
    To Date<RadzenDatePicker style="width: 100%;" Name="Todate" @bind-Value="UISales.UICalenderModel.ToDate" Change="DateSelection" />
    </div> *@
    <div class="row col-md-3 pt-1" style=" margin-left: 0;">
        <label for="LoadName">Select Vendor Stock In</label>
        <RadzenAutoComplete Placeholder="Select vendor stock in..." class="mt-2" Data="@UISales.UIStockInList" Name="LoadName" TextProperty="LoadName"  ValueProperty="@UIStockIn.StockInId" Change="@OnChange" />
    </div>
    <div class="row col-md-3 pt-1 ml-0" style=" margin-left: 0;">
        <label for="">Select Customer</label>
        <RadzenAutoComplete Placeholder="Select customer name.." class="mt-2 " Data="@UISales.UICustomerNamesList" TextProperty="CustomerName"  ValueProperty="@UIStockIn.CustomerId" Change="@CustomerNameChange" />
    </div>
    <div class="row pt-1">
        <div class="col-md-3">
            <label for="quantity">Quantity:</label>
            <input type="number" class="form-control" id="quantity" @bind="@UISales.UISalesPostDataModel.Quantity" @oninput="CalculateAmount" name="quantity"  @onblur="CalculateAmount" placeholder="enter quantity." />

        </div>
    </div>
    <div class="row pt-1">
        <div class="col-md-3">
            <label for="price">Price:</label>
            <input type="number" class="form-control" id="Price" @bind="@UISales.UISalesPostDataModel.Price" @oninput="CalculateAmount" @onblur="CalculateAmount" 
            placeholder="enter price." />

        </div>
    </div>
    <div class="row pt-1">
        <div class="col-md-3">
            <label for="Amount">Total Amount:</label>
            <input type="number" class="form-control" id="TotalAmount" @bind="@UISales.UISalesPostDataModel.TotalAmount" />
        </div>
    </div>

    <div class="row pt-1">
        <div class="col-md-3">
            <label for="fromDate"> Sales Date</label>
            <RadzenDatePicker style="width: 100%;" Name="fromDate" @bind-Value="UISales.UISalesPostDataModel.CreatedDate" />
        </div>
    </div>

    <div class="row pt-1">
        <div class="col-md-3 pt-1">
            <label for="fromDate"> Payment Type</label>
            <InputSelect class="form-control pt-1" @bind-Value="@UISales.UISalesPostDataModel.Type">
                @foreach (var value in Enum.GetValues<SaleType>())
                {
                    <option value="@value">@value</option>
                }
            </InputSelect>
        </div>
    </div>
    <div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add Sales</button>

    </div>
</EditForm>


<div class="row mt-2">
    <h4>Vendor Sales Details</h4>
    <div class="col-md-12">
        <RadzenDataGrid @ref="salesDetailsGrid" AllowAlternatingRows="false" AllowFiltering="true" AllowPaging="true" PageSize="5" AllowSorting="true" EditMode="DataGridEditMode.Single"
                        Data="@salesDetailsList" TItem="SalesDetailsDto" Sort="@Reset" Page="@Reset" Filter="@Reset" ColumnWidth="200px">
            <Columns>
                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="CustomerName" Title="Customer Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="VendorName" Title="Vendor Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="LoadName" Title="LoadName Name" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="Quantity" Title="Quantity" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="Price" Title="Price" Width="120px" />

                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="TotalAmount" Title="TotalAmount" Width="120px" />
                <RadzenDataGridColumn TItem="SalesDetailsDto" Property="CreatedDate" Title="CreatedDate" Width="120px" />


                <RadzenDataGridColumn TItem="SalesDetailsDto" Context="SalesDetailsList" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Frozen="true">
                    <Template Context="SalesDetailsList">
                        <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(args => DeleteRow(SalesDetailsList))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    </div>
</div>

@* <RadzenButton Text="Test Popup" Click=@(args => DialogService.Confirm("Confirm Action?", "Test Popup", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" })) /> *@


@code
{


    private async Task OpenDialog()
    {
        var confirmationResult = await DialogService.Alert("Quantity entered is more than stock quantity left", "Stock Quantiy Error");
        //var confirmationResult = await DialogService.Confirm("confirm you want mark this stock as payment completed", "Stock Payment completed", new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" });
        if (confirmationResult.Equals(true))
        {
            // if yes then
            Console.WriteLine();
        }
    }
}

@code {


    public UISales UISales { get; set; } = new();
    public UISalesStockInData UIStockIn { get; set; } = new();
    private List<SalesDetailsDto> salesDetailsList = new List<SalesDetailsDto>() { new SalesDetailsDto() };
    public List<UIStockInItem> UIStockInList = new List<UIStockInItem>();
    public string Log { get; set; } = "";
    UISalesDto salesDetails = new UISalesDto();

    [Inject]
    protected DialogService DialogService { get; set; }

    //Grid variables
    RadzenDataGrid<SalesDetailsDto> salesDetailsGrid;
    SalesDetailsDto salesDetailsGridInsert;
    SalesDetailsDto salesDetailsGridUpdate;

    protected override void OnInitialized()
    {
        // Load customer details on page load
        GetStockInData();
        LoadCustemerNames();
    }

    private async void FillGridForSaleAsPerStockInId()
    {
        //for binding grid
        int stockInId = UISales.UISalesPostDataModel.StockInId;
        //salesDetailsList = await HttpClient.GetFromJsonAsync<List<SalesDetailsDto>>($"Sales/GetSalesDataAsPerStockInId?stockInId=" + stockInId);
        salesDetails = await HttpClient.GetFromJsonAsync<UISalesDto>($"Sales/GetSalesDataAsPerStockInId?stockInId=" + stockInId);
        salesDetailsList = salesDetails.salesDetailsList;
        StateHasChanged();
    }

    private async void HandleDeleteClick(MouseEventArgs args)
    {

    }
    private async void LoadCustemerNames()
    {
        //for binding autocomplete dropdownlist
        UISales.UICustomerNamesList = new List<UICustomerNames>();
        UISales.UICustomerNamesList = await HttpClient.GetFromJsonAsync<List<UICustomerNames>>($"Customer/GetAllCustomerNames");
        StateHasChanged();
    }
    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UIStockIn.StockInId = UISales.UIStockInList.Where(e => e.LoadName.Equals(value))
                              .Select(p => p.StockInId).FirstOrDefault();
        GetVendorId(UIStockIn.StockInId);
        UISales.UISalesPostDataModel.LoadName = str.ToString();
        UISales.UISalesPostDataModel.StockInId = UIStockIn.StockInId;


        LoadCustemerNames();
        FillGridForSaleAsPerStockInId();
    }

    void CustomerNameChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UIStockIn.CustomerId = UISales.UICustomerNamesList.Where(e => e.CustomerName.Equals(value))
                              .Select(p => p.CustomerId).FirstOrDefault();
        UISales.UISalesPostDataModel.CustomerId = UIStockIn.CustomerId;
        // GetVendorId(UIStockIn.StockInId);
        // LoadCustomerDetails();
        // UIStockIn.VendorName = str.ToString();

        // Console.WriteLine($"Value changed to {str}");
    }

    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }


    // public void DateSelection()
    // {
    //     Log += "DateSelection fired. ";
    //     GetStockInData();
    // }

    public async void CalculateAmount()
    {
        if (UISales.UISalesPostDataModel.Quantity > 0 && salesDetails.TotalStockLeft > 0)
        {
            if (UISales.UISalesPostDataModel.Quantity > salesDetails.TotalStockLeft)
            {
                //@DialogService.Alert("rams message", "rams")
                await OpenDialog();
            }
            else
            {
                UISales.UISalesPostDataModel.TotalAmount = UISales.UISalesPostDataModel.Price * UISales.UISalesPostDataModel.Quantity;
                StateHasChanged();
            }
        }

    }

    public async Task GetStockInData()
    {

        var results = await HttpClient.GetFromJsonAsync<List<UISalesStockInData>>($"StockIn/GetStockInAsPerPaymentNotCompleted");
        foreach (var item in results)
        {
            // UISales.UIStockInList.Add(new UIStockInItem { StockInId = item.StockInId, LoadName = item.LoadName });
            UIStockInList.Add(new UIStockInItem { StockInId = item.StockInId, LoadName = item.LoadName });
        }

        UISales.UIStockInList = UIStockInList;
        StateHasChanged();
    }
    public async Task GetVendorId(int StockInId)
    {

        //int vendorId = 0;
        var vendorId = await HttpClient.GetAsync($"Sales/GetVendorId?id={StockInId}").Result.Content.ReadFromJsonAsync<int>();
        //int.TryParse(id, out vendorId);
        UIStockIn.VendorId = vendorId;
        UISales.UISalesPostDataModel.VendorId = vendorId;

    }

    public void Submit(EditContext formContext)
    {
        var form = (UICustomer)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UISales = (UISales)formContext.Model;

        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"Sales/AddSales", UISales.UISalesPostDataModel);
            Console.WriteLine(obj);
            FillGridForSaleAsPerStockInId();
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }
    void Reset()
    {
        salesDetailsGridInsert = null;
        salesDetailsGridUpdate = null;
    }
    async Task DeleteRow(SalesDetailsDto salesDetails)
    {
        Reset();

        if (salesDetailsList.Contains(salesDetails))
        {
            try
            {
                var obj = await HttpClient.DeleteAsync($"Sales?id={salesDetails.SalesId}");
                FillGridForSaleAsPerStockInId();
            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message.ToString());
            }
            await salesDetailsGrid.Reload();
        }
    }
}
