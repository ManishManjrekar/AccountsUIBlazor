@page "/AddSales"

@using AccountsUIBlazor.UIModels; 
@using System.Net.Http
@using AccountsUIBlazor.UIModels;
@using System.Text;
@using System.Text.Json
@inject HttpClient HttpClient
@inject NavigationManager navigationManager;
<h3>Sales</h3>

@* <div class="form-group">
    <label for="title">Price</label>
    <InputText id="title" @bind-Value="SelectedCoffee.Title" placeholder="Coffee title..." class="form-control" />
</div>
<div class="form-group">
    <label for="title">Quantity</label>
    <InputText id="title" @bind-Value="SelectedCoffee.Title" placeholder="Coffee title..." class="form-control" />
</div>
<div class="form-group">
    <label for="title">total</label>
    <InputText id="title" @bind-Value="SelectedCoffee.Title" placeholder="Coffee title..." class="form-control" />
</div> *@
<EditForm Model="UISales" OnValidSubmit="ValidSubmit" OnInvalidSubmit="InvalidSubmit">
<div class="col-md-8">
        From Date<RadzenDatePicker style="width: 100%;" Name="fromDate" @bind-Value="UISales.UICalenderModel.FromDate" />
</div>
<div class="col-md-8">
        To Date<RadzenDatePicker style="width: 100%;" Name="Todate" @bind-Value="UISales.UICalenderModel.ToDate" Change="DateSelection" />
</div>
<div class="col-md-8 pt-1">
        
        <RadzenAutoComplete Placeholder="Select vendor stock in..." class="mt-2" Data="@UISales.UIStockInList" TextProperty="LoadName" ValueProperty="@UIStockIn.StockInId" Change="@OnChange" />
</div>
<div class="col-md-8">
        <label for="price">Price:</label>
        <input type="number" class="form-control" id="Price" @bind="@UISales.UISalesPostDataModel.Price" @oninput="CalculateAmount" @onblur="CalculateAmount" placeholder="enter price." />
        <label for="quantity">Quantity:</label>
        <input type="number" class="form-control" id="quantity" @bind="@UISales.UISalesPostDataModel.Quantity" @oninput="CalculateAmount" @onblur="CalculateAmount" placeholder="enter quantity." />
        <label for="Amount">Total Amount:</label>
        <input type="number" class="form-control" id="Amount" @bind="@UISales.UISalesPostDataModel.Amount" readonly />

 </div> 
<div>
        <button type="submit" class="btn btn-primary" Style="margin-top:10px">Add Sales</button>
</div>
</EditForm>

<div class="row mt-3">
    <div class="col-md-12">

        <h4>Customer Details</h4>

        <table class="table table-bordered table-striped">
            <thead>
                <tr>
                    <th>Load Name</th>
                    <th>Customer Name</th>
                    <th>Date</th>
                    <th>Price</th>
                    <th>Quantity</th>
                    <th>Total Amount</th>
                    <th></th>
                    <!-- Add more columns as needed -->
                </tr>
            </thead>
            <tbody>
                @foreach (var sale in sales)
                {
                    <tr>
                        <td>@sale.LoadName</td>
                        <td>@sale.CustomerName</td>
                        <td>@sale.CreatedDate</td>
                        <td>@sale.Price</td>
                        <td>@sale.Quantity</td>
                        <td>@sale.Total</td>
                        <td>
                            <div>
                                <RadzenButton ButtonStyle="ButtonStyle.Secondary"
                                              Click="HandleDeleteClick"><RadzenIcon Icon="delete" /></RadzenButton>
                            </div>
                        </td>
                        <!-- Add more columns as needed -->
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

@code {


    public UISales UISales { get; set; } = new();
    public UISalesStockInData UIStockIn { get; set; } = new();
    private List<SalesDetailsDto> sales = new List<SalesDetailsDto>() { new SalesDetailsDto()
    {

    CreatedDate = DateTime.UtcNow,
    CustomerName = "Raams",
    LoadName = "Raams Load",
    Price = 100,
    Quantity = 2,
    Total = 200,
    } };
    public string Log { get; set; } = "";


    protected override void OnInitialized()
    {
        // Load customer details on page load
        LoadCustomerDetails();
    }

    private async void LoadCustomerDetails()
    {
        int stockinId = UIStockIn.StockInId;

        if (UIStockIn.StockInId != 0)
        {
            HttpResponseMessage response = await HttpClient.GetAsync($"Sales/GetSalesDataAsPerStockInId?stockInId={stockinId}");
            if (response.IsSuccessStatusCode)
            {
                string responseContent = await response.Content.ReadAsStringAsync();

                if (!string.IsNullOrEmpty(responseContent))
                {
                    sales = JsonSerializer.Deserialize<List<SalesDetailsDto>>(responseContent);
                }
            }
        }
    }

    private async void HandleDeleteClick(MouseEventArgs args)
    {

    }

    void OnChange(object value)
    {

        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;
        UIStockIn.StockInId = UISales.UIStockInList.Where(e => e.LoadName.Equals(value))
                              .Select(p => p.StockInId).FirstOrDefault();
        GetVendorId(UIStockIn.StockInId);
        LoadCustomerDetails();
        // UIStockIn.VendorName = str.ToString();

        // Console.WriteLine($"Value changed to {str}");
    }

    public void InvalidSubmit(EditContext formContext)
    {
        Log += "OnInvalidSubmit fired. ";
    }


    public void DateSelection()
    {
        Log += "DateSelection fired. ";
        GetStockInData();
    }

    public void CalculateAmount()
    {

        UISales.UISalesPostDataModel.Amount = UISales.UISalesPostDataModel.Price * UISales.UISalesPostDataModel.Quantity;
        StateHasChanged();
    }

    public async Task GetStockInData()
    {
        // Log += "DateSelection fired. ";
        var results = await HttpClient.PostAsJsonAsync($"Sales/PostStockInsData", UISales.UICalenderModel);
        var APIreturn = Newtonsoft.Json.JsonConvert.DeserializeObject<List<UISalesStockInData>> (await results.Content.ReadAsStringAsync());
        Console.WriteLine(APIreturn);
        foreach (var item in APIreturn)
        {
            UISales.UIStockInList.Add(new UIStockInItem { StockInId = item.StockInId, LoadName = item.LoadName });
        }
    }
    public async Task GetVendorId(int StockInId)
    {
       
        int vendorId = 0;
        var id = await HttpClient.GetStringAsync($"Sales/GetVendorId?id={StockInId}");
        int.TryParse(id, out vendorId);
        UIStockIn.VendorId = vendorId;
       
        
    }

    public void Submit(EditContext formContext)
    {
        var form = (UICustomer)formContext.Model;
        Log += "OnSubmit fired. ";
    }

    public async Task ValidSubmit(EditContext formContext)
    {
        UISales = (UISales)formContext.Model;

        try
        {
            var obj = await HttpClient.PostAsJsonAsync($"Customer", UISales);
            Console.WriteLine(obj);
        }
        catch (Exception ex)
        {

            Console.WriteLine(ex.Message.ToString());
        }
        //return null;
    }
}
 